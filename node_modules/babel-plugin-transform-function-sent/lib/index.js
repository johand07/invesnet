"use strict";

exports.__esModule = true;
exports.default = _default;

var _babelPluginSyntaxFunctionSent = _interopRequireDefault(require("babel-plugin-syntax-function-sent"));

var _babelHelperWrapFunction = _interopRequireDefault(require("babel-helper-wrap-function"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(_ref) {
  var t = _ref.types;

  var isFunctionSent = function isFunctionSent(node) {
    return t.isIdentifier(node.meta, {
      name: "function"
    }) && t.isIdentifier(node.property, {
      name: "sent"
    });
  };

  var yieldVisitor = {
    Function: function Function(path) {
      path.skip();
    },
    YieldExpression: function YieldExpression(path) {
      var replaced = t.isAssignmentExpression(path.parent, {
        left: this.sentId
      });

      if (!replaced) {
        path.replaceWith(t.assignmentExpression("=", this.sentId, path.node));
      }
    },
    MetaProperty: function MetaProperty(path) {
      if (isFunctionSent(path.node)) {
        path.replaceWith(this.sentId);
      }
    }
  };
  return {
    inherits: _babelPluginSyntaxFunctionSent.default,
    visitor: {
      MetaProperty: function MetaProperty(path, state) {
        if (!isFunctionSent(path.node)) return;
        var fnPath = path.getFunctionParent();

        if (!fnPath.node.generator) {
          throw new Error("Parent generator function not found");
        }

        var sentId = path.scope.generateUidIdentifier("function.sent");
        fnPath.traverse(yieldVisitor, {
          sentId: sentId
        });
        fnPath.node.body.body.unshift(t.variableDeclaration("let", [t.variableDeclarator(sentId, t.yieldExpression())]));
        (0, _babelHelperWrapFunction.default)(fnPath, state.addHelper("skipFirstGeneratorNext"));
      }
    }
  };
}